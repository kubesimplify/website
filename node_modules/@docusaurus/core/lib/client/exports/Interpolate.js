/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { isValidElement } from 'react';
/*
Minimal implementation of a React interpolate component.
We don't ship a markdown parser nor a feature-complete i18n library on purpose.
More details here: https://github.com/facebook/docusaurus/pull/4295
*/
const ValueRegexp = /\{\w+\}/g;
const ValueFoundMarker = '{}'; // does not care much
export function interpolate(text, values) {
    const elements = [];
    const processedText = text.replace(ValueRegexp, (match) => {
        // remove {{ and }} around the placeholder
        const key = match.substring(1, match.length - 1);
        const value = values?.[key];
        if (typeof value !== 'undefined') {
            const element = isValidElement(value)
                ? value
                : // For non-React elements: basic primitive->string conversion
                    String(value);
            elements.push(element);
            return ValueFoundMarker;
        }
        return match; // no match? add warning?
    });
    // No interpolation to be done: just return the text
    if (elements.length === 0) {
        return text;
    }
    // Basic string interpolation: returns interpolated string
    if (elements.every((el) => typeof el === 'string')) {
        return processedText
            .split(ValueFoundMarker)
            .reduce((str, value, index) => str.concat(value).concat(elements[index] ?? ''), '');
    }
    // JSX interpolation: returns ReactNode
    return processedText.split(ValueFoundMarker).reduce((array, value, index) => [
        ...array,
        <React.Fragment key={index}>
        {value}
        {elements[index]}
      </React.Fragment>,
    ], []);
}
export default function Interpolate({ children, values, }) {
    if (typeof children !== 'string') {
        console.warn('Illegal <Interpolate> children', children);
        throw new Error('The Docusaurus <Interpolate> component only accept simple string values');
    }
    return <>{interpolate(children, values)}</>;
}
