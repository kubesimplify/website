"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizePluginConfigs = void 0;
const tslib_1 = require("tslib");
const module_1 = require("module");
const path_1 = tslib_1.__importDefault(require("path"));
const import_fresh_1 = tslib_1.__importDefault(require("import-fresh"));
const utils_1 = require("@docusaurus/utils");
const versions_1 = require("../versions");
const pluginIds_1 = require("./pluginIds");
const utils_validation_1 = require("@docusaurus/utils-validation");
async function normalizePluginConfig(pluginConfig, configPath) {
    const pluginRequire = (0, module_1.createRequire)(configPath);
    // plugins: ['./plugin']
    if (typeof pluginConfig === 'string') {
        const pluginModuleImport = pluginConfig;
        const pluginPath = pluginRequire.resolve(pluginModuleImport);
        const pluginModule = (0, import_fresh_1.default)(pluginPath);
        return {
            plugin: pluginModule?.default ?? pluginModule,
            options: {},
            pluginModule: {
                path: pluginModuleImport,
                module: pluginModule,
            },
            entryPath: pluginPath,
        };
    }
    // plugins: [function plugin() { }]
    if (typeof pluginConfig === 'function') {
        return {
            plugin: pluginConfig,
            options: {},
            entryPath: configPath,
        };
    }
    // plugins: [
    //   ['./plugin',options],
    // ]
    if (typeof pluginConfig[0] === 'string') {
        const pluginModuleImport = pluginConfig[0];
        const pluginPath = pluginRequire.resolve(pluginModuleImport);
        const pluginModule = (0, import_fresh_1.default)(pluginPath);
        return {
            plugin: pluginModule?.default ?? pluginModule,
            options: pluginConfig[1],
            pluginModule: {
                path: pluginModuleImport,
                module: pluginModule,
            },
            entryPath: pluginPath,
        };
    }
    // plugins: [
    //   [function plugin() { },options],
    // ]
    return {
        plugin: pluginConfig[0],
        options: pluginConfig[1],
        entryPath: configPath,
    };
}
async function normalizePluginConfigs(pluginConfigs, configPath) {
    return Promise.all(pluginConfigs.map((pluginConfig) => normalizePluginConfig(pluginConfig, configPath)));
}
exports.normalizePluginConfigs = normalizePluginConfigs;
function getOptionValidationFunction(normalizedPluginConfig) {
    if (normalizedPluginConfig.pluginModule) {
        // support both commonjs and ES modules
        return (normalizedPluginConfig.pluginModule.module?.default?.validateOptions ??
            normalizedPluginConfig.pluginModule.module?.validateOptions);
    }
    return normalizedPluginConfig.plugin.validateOptions;
}
function getThemeValidationFunction(normalizedPluginConfig) {
    if (normalizedPluginConfig.pluginModule) {
        // support both commonjs and ES modules
        return (normalizedPluginConfig.pluginModule.module.default?.validateThemeConfig ??
            normalizedPluginConfig.pluginModule.module.validateThemeConfig);
    }
    return normalizedPluginConfig.plugin.validateThemeConfig;
}
async function initPlugins({ pluginConfigs, context, }) {
    // We need to resolve plugins from the perspective of the siteDir, since the
    // siteDir's package.json declares the dependency on these plugins.
    const pluginRequire = (0, module_1.createRequire)(context.siteConfigPath);
    const pluginConfigsNormalized = await normalizePluginConfigs(pluginConfigs, context.siteConfigPath);
    async function doGetPluginVersion(normalizedPluginConfig) {
        // get plugin version
        if (normalizedPluginConfig.pluginModule?.path) {
            const pluginPath = pluginRequire.resolve(normalizedPluginConfig.pluginModule?.path);
            return (0, versions_1.getPluginVersion)(pluginPath, context.siteDir);
        }
        return { type: 'local' };
    }
    function doValidateThemeConfig(normalizedPluginConfig) {
        const validateThemeConfig = getThemeValidationFunction(normalizedPluginConfig);
        if (validateThemeConfig) {
            return validateThemeConfig({
                validate: utils_validation_1.normalizeThemeConfig,
                themeConfig: context.siteConfig.themeConfig,
            });
        }
        return context.siteConfig.themeConfig;
    }
    function doValidatePluginOptions(normalizedPluginConfig) {
        const validateOptions = getOptionValidationFunction(normalizedPluginConfig);
        if (validateOptions) {
            return validateOptions({
                validate: utils_validation_1.normalizePluginOptions,
                options: normalizedPluginConfig.options,
            });
        }
        // Important to ensure all plugins have an id
        // as we don't go through the Joi schema that adds it
        return {
            ...normalizedPluginConfig.options,
            id: normalizedPluginConfig.options.id ?? utils_1.DEFAULT_PLUGIN_ID,
        };
    }
    async function initializePlugin(normalizedPluginConfig) {
        const pluginVersion = await doGetPluginVersion(normalizedPluginConfig);
        const pluginOptions = doValidatePluginOptions(normalizedPluginConfig);
        // Side-effect: merge the normalized theme config in the original one
        context.siteConfig.themeConfig = {
            ...context.siteConfig.themeConfig,
            ...doValidateThemeConfig(normalizedPluginConfig),
        };
        const pluginInstance = await normalizedPluginConfig.plugin(context, pluginOptions);
        return {
            ...pluginInstance,
            options: pluginOptions,
            version: pluginVersion,
            path: path_1.default.dirname(normalizedPluginConfig.entryPath),
        };
    }
    const plugins = await Promise.all(pluginConfigsNormalized.map(initializePlugin));
    (0, pluginIds_1.ensureUniquePluginInstanceIds)(plugins);
    return plugins;
}
exports.default = initPlugins;
