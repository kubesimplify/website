"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginVersion = exports.getPackageJsonVersion = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
async function getPackageJsonVersion(packageJsonPath) {
    if (await fs_extra_1.default.pathExists(packageJsonPath)) {
        // eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-dynamic-require, global-require
        return require(packageJsonPath).version;
    }
    return undefined;
}
exports.getPackageJsonVersion = getPackageJsonVersion;
async function getPackageJsonName(packageJsonPath) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-dynamic-require, global-require
    return require(packageJsonPath).name;
}
async function getPluginVersion(pluginPath, siteDir) {
    let potentialPluginPackageJsonDirectory = path_1.default.dirname(pluginPath);
    while (potentialPluginPackageJsonDirectory !== '/') {
        const packageJsonPath = path_1.default.join(potentialPluginPackageJsonDirectory, 'package.json');
        if ((await fs_extra_1.default.pathExists(packageJsonPath)) &&
            (await fs_extra_1.default.lstat(packageJsonPath)).isFile()) {
            if (potentialPluginPackageJsonDirectory === siteDir) {
                // If the plugin belongs to the same docusaurus project, we classify it
                // as local plugin.
                return { type: 'project' };
            }
            return {
                type: 'package',
                name: await getPackageJsonName(packageJsonPath),
                version: await getPackageJsonVersion(packageJsonPath),
            };
        }
        potentialPluginPackageJsonDirectory = path_1.default.dirname(potentialPluginPackageJsonDirectory);
    }
    // In the case where a plugin is a path where no parent directory contains
    // package.json (e.g. inline plugin), we can only classify it as local.
    return { type: 'local' };
}
exports.getPluginVersion = getPluginVersion;
