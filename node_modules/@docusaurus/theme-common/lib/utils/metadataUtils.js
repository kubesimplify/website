/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import Head from '@docusaurus/Head';
import clsx from 'clsx';
import useRouteContext from '@docusaurus/useRouteContext';
import { useBaseUrlUtils } from '@docusaurus/useBaseUrl';
import { useTitleFormatter } from './generalUtils';
/**
 * Helper component to manipulate page metadata and override site defaults.
 * Works in the same way as Helmet.
 */
export function PageMetadata({ title, description, keywords, image, children, }) {
    const pageTitle = useTitleFormatter(title);
    const { withBaseUrl } = useBaseUrlUtils();
    const pageImage = image ? withBaseUrl(image, { absolute: true }) : undefined;
    return (React.createElement(Head, null,
        title && React.createElement("title", null, pageTitle),
        title && React.createElement("meta", { property: "og:title", content: pageTitle }),
        description && React.createElement("meta", { name: "description", content: description }),
        description && React.createElement("meta", { property: "og:description", content: description }),
        keywords && (React.createElement("meta", { name: "keywords", content: 
            // https://github.com/microsoft/TypeScript/issues/17002
            (Array.isArray(keywords) ? keywords.join(',') : keywords) })),
        pageImage && React.createElement("meta", { property: "og:image", content: pageImage }),
        pageImage && React.createElement("meta", { name: "twitter:image", content: pageImage }),
        children));
}
const HtmlClassNameContext = React.createContext(undefined);
/**
 * Every layer of this provider will append a class name to the HTML element.
 * There's no consumer for this hook: it's side-effect-only. This wrapper is
 * necessary because Helmet does not "merge" classes.
 * @see https://github.com/staylor/react-helmet-async/issues/161
 */
export function HtmlClassNameProvider({ className: classNameProp, children, }) {
    const classNameContext = React.useContext(HtmlClassNameContext);
    const className = clsx(classNameContext, classNameProp);
    return (React.createElement(HtmlClassNameContext.Provider, { value: className },
        React.createElement(Head, null,
            React.createElement("html", { className: className })),
        children));
}
function pluginNameToClassName(pluginName) {
    return `plugin-${pluginName.replace(/docusaurus-(?:plugin|theme)-(?:content-)?/gi, '')}`;
}
/**
 * A very thin wrapper around `HtmlClassNameProvider` that adds the plugin ID +
 * name to the HTML class name.
 */
export function PluginHtmlClassNameProvider({ children, }) {
    const routeContext = useRouteContext();
    const nameClass = pluginNameToClassName(routeContext.plugin.name);
    const idClass = `plugin-id-${routeContext.plugin.id}`;
    return (React.createElement(HtmlClassNameProvider, { className: clsx(nameClass, idClass) }, children));
}
//# sourceMappingURL=metadataUtils.js.map